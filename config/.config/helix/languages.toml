# Generic

[language-server.codebook]
command = "codebook-lsp"
args = ["serve"]

[language-server.cspell]
command = "cspell-lsp"
args = ["--stdio"]

# Markdown

[language-server.marksman]
command = "marksman"

[language-server.iwe]
command = "iwes"

[[language]]
name = "markdown"
auto-format = true
indent = { tab-width = 4, unit = "	" }
# formatter = { command = "dprint", args = ["fmt", "--stdin", "-c", "dprint.json", "md"]}
rulers = [120]
# Dropping harper-ls for now, they need better dictionaries and project-level exceptions
# language-servers = [ "marksman", "cspell", "mpls", "harper-ls"]
# language-servers = [ "marksman", "cspell", "mpls"]
language-servers = [ "marksman", "codebook"]

# [language-server.mpls]
# command = "mpls"
# args = ["--dark-mode", "--enable-emoji"]
# # An example args entry showing how to specify flags with values:
# # args = ["--port", "8080", "--browser", "google-chrome"]

# [language-server.harper-ls]
# command = "harper-ls"
# args = ["--stdio"]

[[grammar]]
name = "markdown"
source = { git = "https://github.com/tree-sitter-grammars/tree-sitter-markdown", rev = "62516e8c78380e3b51d5b55727995d2c511436d8", subpath = "tree-sitter-markdown" }

[[language]]
name = "markdown.inline"
scope = "source.markdown.inline"
injection-regex = "markdown\\.inline"
file-types = []
grammar = "markdown_inline"

[[grammar]]
name = "markdown_inline"
source = { git = "https://github.com/tree-sitter-grammars/tree-sitter-markdown", rev = "62516e8c78380e3b51d5b55727995d2c511436d8", subpath = "tree-sitter-markdown-inline" }


# Rust

[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rs|rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
shebangs = ["rust-script", "run-cargo-script", "cargo"]
auto-format = true
comment-tokens = ["//", "///", "//!"]
block-comment-tokens = [
  { start = "/*", end = "*/" },
  { start = "/**", end = "*/" },
  { start = "/*!", end = "*/" },
]
language-servers = ["rust-analyzer"]
# language-servers = ["rust-analyzer", "codebook"]
# indent = { tab-width = 4, unit = "    " }
formatter = { command = "rust-fmt" }
indent = { tab-width = 2, unit = "	"}
persistent-diagnostic-sources = ["rustc", "clippy"]

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false

[language-server.rust-analyzer.config.check]
command = "clippy"
args = [
  "--fix",
  "--",
  "-W",
  "clippy::pedantic",
  "-W",
  "clippy::nusery",
  "-W",
  "clippy::expect_used",
  "-W",
  "clippy::unwrap_used",
]


# Python

[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]

[language-server.basedpyright.config]
reportMissingTypeStubs = false

[language-server.basedpyright.config.python.analysis]
autoImportCompletions = true
# Remember to put these settings into the project-level config so
# that other developers can see the errors you're dealing with!
# Example config (inside of pyproject.toml):
# [tool.basedpyright]
# # https://docs.basedpyright.com/latest/configuration/config-files/#diagnostic-settings-defaults
# typeCheckingMode = "recommended"
# reportExplicitAny = false

[language-server.ruff]
command = "ruff-lsp"
# settings = {args = []}

[language-server.ruff.config]
documentFormatting = true
settings.run = "onSave"

[language-server.pylyzer]
command = "pylyzer"
args = ["--server"]

[[language]]
name = "python"
language-servers = [
  # { name = "ruff", only-features = [ "format", "diagnostics" ] },
  # { name = "ruff" },
  { name = "basedpyright", except-features = [ "format" ] },
  # { name = "pylyzer" },
  { name = "codebook"},
]
auto-format = true
# uv tool install isort black basedpyright
formatter = { command = "bash", args = ["-c", "isort - | black --quiet -"] }
# formatter = { command = "bash", args = ["-c", "isort - | ruff --quiet -"] }
# scope = "source.python"
# injection-regex = "python"
file-types = ["py","pyi","py3","pyw","ptl",".pythonstartup",".pythonrc","SConstruct", "rpy", "cpy", "ipy", "pyt", "SConscript"]
# shebangs = ["python"]
# roots = ["pyproject.toml", "setup.py", "poetry.lock", "pyrightconfig.json"]
# comment-token = "#"
# indent = { tab-width = 4, unit = "    " }
rulers = [80, 100, 120]


# Bash

[language-server.bash]
command = "bash-language-server"
args = ["start"]

[[language]]
name = "bash"
scope = "source.bash"
injection-regex = "(shell|bash|zsh|sh)"
file-types = [
  "sh",
  "bash",
  "ash",
  "dash",
  "ksh",
  "mksh",
  "zsh",
  "zshenv",
  "zlogin",
  "zlogout",
  "zprofile",
  "zshrc",
  "eclass",
  "ebuild",
  "bazelrc",
  "Renviron",
  "zsh-theme",
  "cshrc",
  "tcshrc",
  "bashrc_Apple_Terminal",
  "zshrc_Apple_Terminal",
  { glob = "tmux.conf" },
  { glob = ".bash_history" },
  { glob = ".bash_login" },
  { glob = ".bash_logout" },
  { glob = ".bash_profile" },
  { glob = ".bashrc" },
  { glob = ".profile" },
  { glob = ".zshenv" },
  { glob = ".zlogin" },
  { glob = ".zlogout" },
  { glob = ".zprofile" },
  { glob = ".zshrc" },
  { glob = ".zimrc" },
  { glob = "APKBUILD" },
  { glob = ".bash_aliases" },
  { glob = ".Renviron" },
  { glob = ".xprofile" },
  { glob = ".xsession" },
  { glob = ".xsessionrc" },
  { glob = ".yashrc" },
  { glob = ".yash_profile" },
  { glob = ".hushlogin" },
]
shebangs = ["sh", "bash", "dash", "zsh"]
comment-token = "#"
language-servers = [ "bash" ]
indent = { tab-width = 2, unit = "	" }

[[language]]
name = "html"
formatter = { command = 'prettier', args = ["--parser", "html"] }

[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }

[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }

[[language]]
name = "javascript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "typescript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

# [[language]]
# name = "hcl"
# formatter = { command = 'terraform', args = ["fmt", "-"] }
# auto-format = true

# [[language]]
# name = "tfvars"
# formatter = { command = 'terraform', args = ["fmt", "-"] }
# auto-format = true


# [language-server.terraform]
# command = "terraform-ls"
# args = ["serve"]

# [[language]]
# name = "terraform"
# language-servers = [ "terraform" ]
# scope = "source.terraform"
# file-types = [ "tf" ]

[language-server.terraform-ls]
# terraform-ls = { command = "terraform-ls", args = ["serve"] }
command = "terraform-ls"
args = ["serve"]

[[language]]
name = "hcl"
scope = "source.hcl"
injection-regex = "(hcl|tf|nomad)"
language-id = "terraform"
file-types = ["hcl", "tf", "nomad"]
comment-token = "#"
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 2, unit = "  " }
language-servers = [ "terraform-ls" ]
auto-format = true

[[grammar]]
name = "hcl"
source = { git = "https://github.com/tree-sitter-grammars/tree-sitter-hcl", rev = "9e3ec9848f28d26845ba300fd73c740459b83e9b" }

[[language]]
name = "tfvars"
scope = "source.tfvars"
language-id = "terraform-vars"
file-types = ["tfvars"]
comment-token = "#"
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 2, unit = "  " }
language-servers = [ "terraform-ls" ]
auto-format = true
grammar = "hcl"

[[language]]
name = "sshclientconfig"
file-types = [ { glob = ".ssh/config" }, { glob = ".ssh/config.d/*" } ]
indent = { tab-width = 4, unit = "\t" }
